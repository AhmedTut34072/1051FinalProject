import os
import shutil
import socket
import ipaddress
import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog
from datetime import datetime
import string

# Malware signatures for simulation
MALWARE_SIGNATURES = ["malicious_code", "virus123", "trojan_horse"]
QUARANTINE_FOLDER = "quarantine"

# Ensure quarantine folder exists
if not os.path.exists(QUARANTINE_FOLDER):
    os.makedirs(QUARANTINE_FOLDER)

# Function to scan a file for malware
def scan_file(file_path):
    try:
        with open(file_path, "r", errors="ignore") as file:
            content = file.read()
            for signature in MALWARE_SIGNATURES:
                if signature in content:
                    return f"Malware detected in {file_path}!\nSignature: {signature}"
            return f"selected file is clean."
    except Exception as e:
        return f"Error reading {file_path}: {e}"

# Function to scan all files in a folder
def scan_folder(folder_path):
    if not os.path.isdir(folder_path):
        return "Invalid folder path."
    results = []
    for root, _, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            result = scan_file(file_path)
            results.append(result)
    return "\n".join(results)

# Function to quarantine infected files
def quarantine_file(file_path):
    try:
        shutil.copy(file_path, QUARANTINE_FOLDER)
        os.remove(file_path)
        return f"{file_path} has been moved to quarantine."
    except Exception as e:
        return f"Error quarantining {file_path}: {e}"

# Network scanning function
def scan_network(network_range):
    results = []
    try:
        network = ipaddress.IPv4Network(network_range, strict=False)
        for ip in network:
            ip_str = str(ip)
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(1.0)
                    result = s.connect_ex((ip_str, 80))  # Check port 80
                    if result == 0:
                        results.append(f"{ip_str} is active (port 80 open).")
                    else:
                        results.append(f"{ip_str} is inactive.")
            except Exception as e:
                results.append(f"Error scanning {ip_str}: {e}")
    except ValueError as e:
        return f"Invalid network range: {e}"

    return "\n".join(results)

# Function to evaluate password strength
def evaluate_password(password):
    if len(password) < 8:
        return "Weak: Password should be at least 8 characters long."
    if not any(char.isupper() for char in password):
        return "Weak: Password should include at least one uppercase letter."
    if not any(char.islower() for char in password):
        return "Weak: Password should include at least one lowercase letter."
    if not any(char.isdigit() for char in password):
        return "Weak: Password should include at least one number."
    if not any(char in string.punctuation for char in password):
        return "Weak: Password should include at least one special character (!@#$%^&*)."
    if password.lower() in ["password", "123456", "qwerty", "abc123", "letmein"]:
        return "Weak: Password is too common."
    return "Strong: Your password meets all criteria!"

# GUI functions
def browse_file():
    file_path = filedialog.askopenfilename(title="Select a File")
    if file_path:
        result = scan_file(file_path)
        if "Malware detected" in result:
            quarantine = messagebox.askyesno("Malware Found", "Malware detected! Quarantine the file?")
            if quarantine:
                quarantine_msg = quarantine_file(file_path)
                result += f"\n{quarantine_msg}"
        log_result(result)
        messagebox.showinfo("Scan Result", result)

def browse_folder():
    folder_path = filedialog.askdirectory(title="Select a Folder")
    if folder_path:
        results = scan_folder(folder_path)
        log_result(results)
        messagebox.showinfo("Scan Results", results)


def scan_network_gui():
    try:
        network_range = simpledialog.askstring("Network Scan", "Enter network range (e.g., 192.168.1.0/24):")
        if network_range:
            results = scan_network(network_range)
            log_result(results)
            messagebox.showinfo("Network Scan Results", results)
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred during the scan: {e}")

def password_checker_gui():
    password = simpledialog.askstring("Password Checker", "Enter a password to check its strength:", show="*")
    if password:
        result = evaluate_password(password)
        messagebox.showinfo("Password Strength", result)

def log_result(result):
    with open("scan_log.txt", "a") as log_file:
        log_file.write(f"{datetime.now()}:\n{result}\n{'-'*40}\n")

# GUI setup
def create_gui():
    root = tk.Tk()
    root.title("Multifunctional Antivirus and Password Checker")
    root.geometry("200x400")

    # Title
    tk.Label(root, text="Antivirus Tool", font=("Arial", 16, "bold")).grid(row=0, column=0, columnspan=2, pady=10)

    # File scan
    tk.Button(root, text="Scan File", command=browse_file, font=("Arial", 12), width=20).grid(row=1, column=0, pady=10)

    # Folder scan
    tk.Button(root, text="Scan Folder", command=browse_folder, font=("Arial", 12), width=20).grid(row=2, column=0, pady=10)

    # Network scan
    tk.Button(root, text="Scan Network", command=scan_network_gui, font=("Arial", 12), width=20).grid(row=3, column=0, pady=10)


    # Password checker
    tk.Button(root, text="Check Password", command=password_checker_gui, font=("Arial", 12), width=20).grid(row=5, column=0, pady=10)

    # Quarantine info
    tk.Label(root, text=f"Quarantine Folder: {QUARANTINE_FOLDER}", font=("Arial", 10)).grid(row=6, column=0, pady=5)

    # Exit button
    tk.Button(root, text="Exit", command=root.quit, font=("Arial", 12), width=20).grid(row=7, column=0, pady=20)

    root.mainloop()

# Run the GUI
if __name__ == "__main__":
    create_gui()
